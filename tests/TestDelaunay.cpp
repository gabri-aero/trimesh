#include <gtest/gtest.h>
#include <Delaunay.hpp>

// Delaunay test
TEST(DelaunayTest, GeometryUtils) {
  Coord2D p1{-1, 3};
  Coord2D p2{4, 5};
  Coord2D p3{4, -7};

  ASSERT_NEAR(5.38516480713, dist(p1, p2), 1e-10);
  ASSERT_EQ(12, dist(p2, p3));


  Triangle triangle{Node{p1}, Node{p2}, Node{p3}};
  Coord2D true_circumcenter{3.5, -1};
  Coord2D calc_circumcenter = triangle.circumcenter();
  ASSERT_EQ(true_circumcenter, calc_circumcenter);

  double true_circum_radius{6.02};
  double calc_circum_radius = dist(triangle.circumcenter(), p1);
  ASSERT_NEAR(true_circum_radius, calc_circum_radius, 0.01);

  Node a1{1, 5}; 
  Node a2{1, 4}; 
  Node b1{-2, 2};
  Node b2{-1.5, 2};
  Node c1{8, -6};
  Node c2{6, -6}; 

  ASSERT_EQ(false, triangle.circumscribe(a1));
  ASSERT_EQ(false, triangle.circumscribe(b1));
  ASSERT_EQ(false, triangle.circumscribe(c1));
  
  ASSERT_EQ(true, triangle.circumscribe(a2));
  ASSERT_EQ(true, triangle.circumscribe(b2));
  ASSERT_EQ(true, triangle.circumscribe(c2));
}

TEST(DelaunayTest, TriangulationTest1) {
  std::vector<double> x{1, 3, 5};
  std::vector<double> y{4, 2, 8};

  std::vector<Coord2D> points;

	for(size_t i{0}; i<x.size(); i++) {
		points.push_back(Coord2D{x[i], y[i]});
	}

  Delaunay d{points};

  d.compute();

  std::vector<std::array<int, 2>> calc_edges{d.get_edges_index()};

  std::vector<std::array<int,2>>  true_edges{
    {0, 1},
    {0, 2},
    {1, 2}
  };

  ASSERT_EQ(true_edges, calc_edges);
}


TEST(DelaunayTest, TriangulationTest2) {
  std::vector<double> x{-1.01, -1.01, 1.01, 3.04, 5.05, 8.21, 8.22};
  std::vector<double> y{0, 5, 2.01, 3.02, 2.003, 0, 5.03};

  std::vector<Coord2D> points;

	for(size_t i{0}; i<x.size(); i++) {
		points.push_back(Coord2D{x[i], y[i]});
	}

  Delaunay d{points};

  d.compute();

  std::vector<std::array<int, 2>> calc_edges{d.get_edges_index()};

  std::vector<std::array<int,2>>  true_edges{
    {0, 1},
    {0, 2},
    {0, 4},
    {0, 5},
    {1, 2},
    {1, 3},
    {1, 6},
    {2, 3},
    {2, 4},
    {3, 4},
    {3, 6},
    {4, 5},
    {4, 6},
    {5, 6}
  };

  ASSERT_EQ(true_edges, calc_edges);
}


TEST(DelaunayTest, TriangulationTest3) {
  std::vector<double> x{-5.382439e-01, 8.672322e-01, 9.759865e-01, 3.373903e-01, -9.960941e-01, -5.232140e-01, -1.297447e+00, 9.173886e-01, 1.766016e-01, 7.551799e-01, -5.915000e-01, 1.844390e+00, 1.816922e+00, -1.238334e-01, -1.110601e+00, -6.809059e-01, 1.416933e-02, -5.955061e-02, -6.610110e-01, 3.059509e-01, -4.090578e-01, -1.281855e+00, -2.849028e-01, -6.478686e-02, 1.000383e+00, -8.013293e-01, 9.180002e-02, 2.738048e-01, -2.133468e+00, 4.039773e-01, -9.584994e-01, -3.263169e-01, 2.478696e+00, 1.539076e+00, 8.270109e-01, -1.595872e-01, -8.577217e-01, 3.983540e-01, -2.248088e-01, -1.314668e+00, -2.179687e-02, -8.800603e-01, 1.108640e+00, -4.641383e-01, 6.645692e-01, -5.301381e-01, 4.090933e-02, 1.550539e-01, -3.210850e-01, 2.145815e+00, 8.004066e-01, 1.196272e+00, 2.097546e+00, 3.877150e-01, 1.045318e+00, -1.371826e+00, -9.584072e-01, -2.668940e+00, -8.026852e-01, -4.510159e-01, -7.365815e-01, 1.114704e+00, -8.533500e-01, -7.587519e-01, 9.797800e-02, -8.496229e-01, 5.607026e-01, -3.474978e-01, 1.370858e+00, 7.410227e-01, -7.128804e-01, 8.047233e-01, 9.776257e-01, 9.395678e-01, -2.262916e+00, -5.136854e-01, -1.989473e+00, 1.678183e+00, 3.586945e-01, -2.533339e-01, -1.146868e+00, -7.008825e-01, -6.454434e-01, 7.818765e-01, 3.156637e-01, 1.274417e+00, -7.450960e-02, -2.303614e+00, 9.855697e-01, 1.023578e+00, 1.315688e-01, 6.020555e-01, -6.814317e-03, 8.804567e-02, -1.149734e-01, -1.361585e+00, -7.867711e-01, -2.336840e+00, 4.078217e-01, -6.136181e-01
  };
  std::vector<double> y{3.276000e-02, 7.041082e-01, -8.646718e-01, -2.886945e-01, 5.127668e-01, -1.497546e+00, -1.452787e+00, -8.001354e-01, -1.644209e+00, 1.513770e+00, 7.290554e-01, 2.088076e-01, 1.085614e+00, 6.286258e-01, -8.740998e-01, 1.917828e+00, 9.748204e-02, 5.069763e-01, 1.024757e+00, -9.278990e-01, -8.892102e-01, -9.832285e-01, -3.137891e-02, 8.687596e-01, -9.148114e-01, 3.432416e-02, -2.502526e-01, -1.057564e+00, -8.613161e-01, -3.535544e-01, 8.295073e-01, -3.687436e-01, 6.158087e-02, 5.580356e-01, -1.763803e-01, 1.048241e+00, 1.013783e+00, -9.487698e-01, -1.070397e-02, -3.514985e-01, -1.682874e+00, -1.049330e+00, 6.897928e-01, 7.435481e-03, -4.569744e-01, -5.636481e-01, 1.456720e+00, -9.782996e-01, -1.129220e+00, -3.054248e-02, 1.584778e+00, -8.783776e-01, 2.412176e-01, 6.874760e-01, -5.672877e-01, 9.889505e-01, -3.935066e-01, 8.532601e-01, 3.652434e-01, 1.582498e-01, -1.766521e+00, 5.980825e-01, -5.576371e-01, -1.198229e+00, -2.147332e+00, 2.252142e-01, 3.703440e-01, -1.880586e+00, 5.294103e-02, -7.001699e-01, 2.174853e-01, -1.779708e+00, 5.197132e-01, -3.555129e-01, 1.984596e+00, -1.349885e+00, -6.351410e-01, -7.879471e-01, 1.368118e+00, 1.442315e+00, -5.123390e-01, 3.023886e-01, 2.045814e+00, 1.732632e-01, 6.631633e-02, -2.019106e+00, -2.423971e+00, 1.301760e+00, 1.943366e+00, 2.605475e-01, -3.717064e-01, -5.789018e-01, 1.038367e+00, 1.856884e+00, 1.063980e+00, 1.376545e+00, 6.564385e-01, -2.250579e+00, -1.437417e+00, 1.477849e+00
  };

  std::vector<Coord2D> points;

	for(size_t i{0}; i<x.size(); i++) {
		points.push_back(Coord2D{x[i], y[i]});
	}

  Delaunay d{points};

  d.compute();

  std::vector<std::array<int, 3>> calc_tris{d.get_triangles_index()};

  std::vector<std::array<int, 3>>  true_tris{{0, 25, 56}, {0, 25, 70}, {0, 31, 43}, {0, 31, 45}, {0, 43, 59}, {0, 45, 56}, {0, 59, 70}, {1, 9, 42}, {1, 9, 78}, {1, 42, 72}, {1, 53, 66}, {1, 53, 78}, {1, 66, 72}, {2, 7, 24}, {2, 7, 54}, {2, 24, 51}, {2, 51, 54}, {3, 26, 84}, {3, 26, 90}, {3, 29, 34}, {3, 29, 90}, {3, 34, 84}, {4, 30, 55}, {4, 30, 96}, {4, 39, 55}, {4, 39, 65}, {4, 58, 65}, {4, 58, 96}, {5, 40, 67}, {5, 40, 75}, {5, 60, 63}, {5, 60, 67}, {5, 63, 75}, {6, 21, 28}, {6, 21, 41}, {6, 28, 97}, {6, 41, 63}, {6, 60, 63}, {6, 60, 97}, {7, 24, 37}, {7, 37, 69}, {7, 54, 69}, {8, 27, 47}, {8, 27, 98}, {8, 40, 47}, {8, 40, 64}, {8, 64, 71}, {8, 71, 98}, {9, 42, 50}, {9, 50, 93}, {9, 78, 93}, {10, 13, 23}, {10, 13, 59}, {10, 18, 35}, {10, 18, 96}, {10, 23, 35}, {10, 59, 81}, {10, 81, 96}, {11, 33, 52}, {11, 33, 68}, {11, 49, 52}, {11, 49, 68}, {12, 32, 52}, {12, 33, 42}, {12, 33, 52}, {12, 42, 50}, {12, 50, 88}, {13, 17, 53}, {13, 17, 59}, {13, 23, 53}, {14, 21, 41}, {14, 21, 80}, {14, 41, 62}, {14, 62, 80}, {15, 74, 82}, {15, 74, 95}, {15, 79, 93}, {15, 79, 99}, {15, 82, 93}, {15, 95, 99}, {16, 17, 59}, {16, 17, 84}, {16, 26, 38}, {16, 26, 84}, {16, 38, 59}, {17, 53, 66}, {17, 66, 84}, {18, 35, 79}, {18, 36, 96}, {18, 36, 99}, {18, 79, 99}, {19, 27, 37}, {19, 27, 47}, {19, 29, 90}, {19, 29, 91}, {19, 37, 91}, {19, 47, 90}, {20, 31, 45}, {20, 31, 90}, {20, 41, 62}, {20, 41, 63}, {20, 45, 62}, {20, 47, 48}, {20, 47, 90}, {20, 48, 63}, {21, 28, 76}, {21, 39, 76}, {21, 39, 80}, {22, 31, 38}, {22, 31, 43}, {22, 38, 59}, {22, 43, 59}, {23, 35, 94}, {23, 53, 92}, {23, 92, 94}, {24, 37, 98}, {24, 51, 71}, {24, 71, 98}, {25, 39, 56}, {25, 39, 65}, {25, 65, 70}, {26, 31, 38}, {26, 31, 90}, {27, 37, 98}, {28, 57, 76}, {28, 57, 97}, {29, 34, 44}, {29, 44, 91}, {30, 36, 55}, {30, 36, 96}, {32, 49, 52}, {32, 49, 77}, {32, 77, 85}, {33, 42, 61}, {33, 61, 89}, {33, 68, 89}, {34, 44, 73}, {34, 68, 73}, {34, 68, 89}, {34, 83, 84}, {34, 83, 89}, {35, 79, 94}, {36, 55, 95}, {36, 95, 99}, {37, 69, 91}, {39, 55, 57}, {39, 56, 80}, {39, 57, 76}, {40, 47, 48}, {40, 48, 75}, {40, 64, 67}, {42, 61, 72}, {44, 69, 73}, {44, 69, 91}, {45, 56, 62}, {46, 78, 92}, {46, 78, 93}, {46, 79, 93}, {46, 79, 94}, {46, 92, 94}, {48, 63, 75}, {49, 68, 77}, {50, 88, 93}, {51, 54, 77}, {51, 71, 85}, {51, 77, 85}, {53, 78, 92}, {54, 68, 73}, {54, 68, 77}, {54, 69, 73}, {55, 57, 87}, {55, 87, 95}, {56, 62, 80}, {57, 74, 87}, {58, 65, 81}, {58, 81, 96}, {59, 70, 81}, {60, 67, 86}, {60, 86, 97}, {61, 72, 89}, {64, 67, 86}, {64, 71, 85}, {64, 85, 86}, {65, 70, 81}, {66, 72, 83}, {66, 83, 84}, {72, 83, 89}, {74, 87, 95}, {82, 88, 93}
  };

  ASSERT_EQ(true_tris, calc_tris);
}


TEST(DelaunayTest, NeighborTest) {
  std::vector<double> x{-1.01, -1.01, 1.01, 3.04, 5.05, 8.21, 8.22};
  std::vector<double> y{0, 5, 2.01, 3.02, 2.003, 0, 5.03};

  std::vector<Coord2D> points;

	for(size_t i{0}; i<x.size(); i++) {
		points.push_back(Coord2D{x[i], y[i]});
	}

  Delaunay d{points};

  d.compute();

  std::vector<std::array<int, 2>> calc_edges{d.get_edges_index()};

  std::vector<std::array<int,2>>  true_edges{
    {0, 1},
    {0, 2},
    {0, 4},
    {0, 5},
    {1, 2},
    {1, 3},
    {1, 6},
    {2, 3},
    {2, 4},
    {3, 4},
    {3, 6},
    {4, 5},
    {4, 6},
    {5, 6}
  };

  std::vector<std::array<int, 3>> calc_tris{d.get_triangles_index()};

  std::vector<std::array<int, 3>> true_tris{
    {0, 1, 2},
    {0, 2, 4},
    {0, 4, 5},
    {1, 2, 3},
    {1, 3, 6},
    {2, 3, 4},
    {3, 4, 6},
    {4, 5, 6}
  };

  Triangle t = d.get_triangles().at(0);

  auto neighbors = d.get_neighbors(t);

  std::vector<std::array<int, 3>> calc_neighbors{
    neighbors.at(0).first.get_vertices_index(),
    neighbors.at(1).first.get_vertices_index()
  };

  std::vector<std::array<int, 3>> true_neighbors{
    {0, 2, 4},
    {1, 2, 3}
  };

  ASSERT_EQ(calc_neighbors, true_neighbors);
}